To create a Spring Boot application that connects to an external API using `RestTemplate` and stores the data in a MySQL database, follow these steps:

### Step 1: Set Up the Spring Boot Project

1. **Create a Spring Boot Project**:
   - Go to [Spring Initializr](https://start.spring.io/).
   - Select the following:
     - **Project**: Maven Project
     - **Language**: Java
     - **Spring Boot Version**: Latest stable version
     - **Dependencies**: Spring Web, Spring Data JPA, MySQL Driver

2. **Generate the Project** and extract the zip file. Import the project into your favorite IDE (e.g., IntelliJ IDEA, Eclipse).

### Step 2: Configure `application.properties`

Add your MySQL database configuration in `src/main/resources/application.properties`:

```properties
# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/weather_db
spring.datasource.username=root
spring.datasource.password=your_password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
```

Replace `your_password` with your MySQL password.

### Step 3: Create a Model Class

Create a model class, `WeatherData`, to represent the weather data to be stored in the MySQL database.

```java
package com.example.weatherapp.model;

import javax.persistence.*;

@Entity
public class WeatherData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String cityName;
    private String weatherDescription;
    private double temperature;
    private double humidity;

    // Constructors, getters, and setters
    public WeatherData() {}

    public WeatherData(String cityName, String weatherDescription, double temperature, double humidity) {
        this.cityName = cityName;
        this.weatherDescription = weatherDescription;
        this.temperature = temperature;
        this.humidity = humidity;
    }

    // Getters and setters
    // ...
}
```

### Step 4: Create a Repository Interface

Create a repository interface to manage the `WeatherData` entity:

```java
package com.example.weatherapp.repository;

import com.example.weatherapp.model.WeatherData;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface WeatherRepository extends JpaRepository<WeatherData, Long> {
}
```

### Step 5: Create a Service Class

Create a service class to handle the API call using `RestTemplate` and save the data to the database.

```java
package com.example.weatherapp.service;

import com.example.weatherapp.model.WeatherData;
import com.example.weatherapp.repository.WeatherRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;

import org.json.JSONObject;

@Service
public class WeatherService {

    @Autowired
    private WeatherRepository weatherRepository;

    private final String API_URL = "https://weatherapi-com.p.rapidapi.com/forecast.json?q=trivandrum&days=3";
    private final String RAPIDAPI_KEY = "5850075491msh82c4adf02902eb2p1f066djsn839330b9d262";
    private final String RAPIDAPI_HOST = "weatherapi-com.p.rapidapi.com";

    public WeatherData fetchWeatherData(String city) {
        RestTemplate restTemplate = new RestTemplate();
        
        HttpHeaders headers = new HttpHeaders();
        headers.set("x-rapidapi-key", RAPIDAPI_KEY);
        headers.set("x-rapidapi-host", RAPIDAPI_HOST);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        String url = "https://weatherapi-com.p.rapidapi.com/forecast.json?q=" + city + "&days=3";
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
        
        // Parsing the JSON response
        JSONObject json = new JSONObject(response.getBody());
        String weatherDescription = json.getJSONObject("current").getJSONArray("condition").getJSONObject(0).getString("text");
        double temperature = json.getJSONObject("current").getDouble("temp_c");
        double humidity = json.getJSONObject("current").getDouble("humidity");
        
        WeatherData weatherData = new WeatherData(city, weatherDescription, temperature, humidity);
        weatherRepository.save(weatherData);

        return weatherData;
    }
}
```

### Step 6: Create a REST Controller

Create a REST controller to expose the endpoint that fetches weather data and stores it in the database.

```java
package com.example.weatherapp.controller;

import com.example.weatherapp.model.WeatherData;
import com.example.weatherapp.service.WeatherService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/weather")
public class WeatherController {

    @Autowired
    private WeatherService weatherService;

    @GetMapping("/{city}")
    public WeatherData getWeatherData(@PathVariable String city) {
        return weatherService.fetchWeatherData(city);
    }
}
```

### Step 7: Run the Application

Run the Spring Boot application by executing the `main` method in the `WeatherAppApplication` class.

```java
package com.example.weatherapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class WeatherAppApplication {
    public static void main(String[] args) {
        SpringApplication.run(WeatherAppApplication.class, args);
    }
}
```

### Step 8: Test the API

1. Start your MySQL server and ensure the database `weather_db` is created.
2. Run the Spring Boot application.
3. Use tools like **Postman** or a web browser to access the endpoint:

   ```
   http://localhost:8080/api/weather/trivandrum
   ```

   This should fetch the weather data for Trivandrum, store it in the MySQL database, and return it as a response.

### Additional Notes

- **Exception Handling**: Implement exception handling for better error management.
- **DTOs and Validation**: Use Data Transfer Objects (DTOs) and validation for incoming requests.
- **Environment Variables**: Store sensitive information like the API key in environment variables or use a configuration management tool.

This should provide you with a complete Spring Boot application that connects to an external API and stores data in a MySQL database using `RestTemplate`.